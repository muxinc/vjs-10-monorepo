---
import type { AnySupportedStyle, SupportedFramework } from '@/types/docs';
import type { CollectionEntry } from 'astro:content';

import { getCollection, render } from 'astro:content';

import DocsLayout from '@/layouts/Docs.astro';
import { getAvailableStyles, SUPPORTED_FRAMEWORKS } from '@/types/docs';
import { filterSidebar, getAllGuideSlugs } from '@/utils/docs/sidebar';

export async function getStaticPaths() {
  const docs = await getCollection('docs');
  const paths = [];

  // Build a map of allowed slugs for each framework/style combination
  const allowedSlugsMap = new Map<string, Set<string>>();
  for (const framework of SUPPORTED_FRAMEWORKS) {
    const availableStyles = getAvailableStyles(framework);
    for (const style of availableStyles) {
      const key = `${framework}-${style}`;
      const filteredSidebar = filterSidebar(framework, style);
      allowedSlugsMap.set(key, new Set(getAllGuideSlugs(filteredSidebar)));
    }
  }

  // Generate paths using the precomputed map
  for (const framework of SUPPORTED_FRAMEWORKS) {
    const availableStyles = getAvailableStyles(framework);
    for (const style of availableStyles) {
      const key = `${framework}-${style}`;
      const allowedSlugs = allowedSlugsMap.get(key)!;

      // Only generate paths for docs that are visible in the sidebar
      for (const doc of docs) {
        if (allowedSlugs.has(doc.id)) {
          paths.push({
            params: {
              framework,
              style,
              slug: doc.id,
            },
            props: { doc, framework, style },
          });
        }
      }
    }
  }

  return paths;
}

type Props = {
  doc: CollectionEntry<'docs'>;
  framework: SupportedFramework;
  style: AnySupportedStyle;
};

const { doc, framework, style } = Astro.props;
const { Content } = await render(doc);
---

<DocsLayout doc={doc} framework={framework} style={style}>
  <Content />
</DocsLayout>
