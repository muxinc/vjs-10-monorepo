---
import type { AnySupportedStyle, SupportedFramework } from '@/types/docs';
import type { CollectionEntry } from 'astro:content';

import { getCollection, render } from 'astro:content';

import DocsLayout from '@/layouts/Docs.astro';
import { getAvailableStyles, SUPPORTED_FRAMEWORKS } from '@/types/docs';
import { filterSidebar, getAllGuideSlugs } from '@/utils/docs/sidebar';

export async function getStaticPaths() {
  const docsCollection = await getCollection('docs');

  /**
   * Get all valid framework/style combinations.
   */
  type FrameworkStyleKey = `${SupportedFramework}-${AnySupportedStyle}`;
  type AllowedSlugsMap = Map<FrameworkStyleKey, Set<string>>;
  const allFrameworkStyleCombinations = SUPPORTED_FRAMEWORKS.flatMap((framework) => {
    const availableStyles = getAvailableStyles(framework);
    return availableStyles.map((style) => ({
      framework,
      style,
      key: `${framework}-${style}` as FrameworkStyleKey,
    }));
  });

  /**
   * Build a map of allowed slugs for each framework/style combination.
   * Only docs that appear in the filtered sidebar will be allowed to generate pages.
   */
  const allowedSlugsMap: AllowedSlugsMap = new Map();

  for (const { framework, style, key } of allFrameworkStyleCombinations) {
    const filteredSidebar = filterSidebar(framework, style);
    const allowedSlugs = getAllGuideSlugs(filteredSidebar);
    allowedSlugsMap.set(key, new Set(allowedSlugs));
  }

  // Generate a path for each doc that's visible in at least one framework/style combination
  const staticPaths = allFrameworkStyleCombinations.flatMap(({ framework, style, key }) => {
    const allowedSlugs = allowedSlugsMap.get(key)!;

    // Filter docs to only those visible in this combination's sidebar
    return docsCollection
      .filter((doc) => allowedSlugs.has(doc.id))
      .map((doc) => ({
        params: {
          framework,
          style,
          slug: doc.id,
        },
        props: { doc, framework, style },
      }));
  });

  return staticPaths;
}

type Props = {
  doc: CollectionEntry<'docs'>;
  framework: SupportedFramework;
  style: AnySupportedStyle;
};

const { doc, framework, style } = Astro.props;
const { Content } = await render(doc);
---

<DocsLayout doc={doc} framework={framework} style={style}>
  <Content />
</DocsLayout>
