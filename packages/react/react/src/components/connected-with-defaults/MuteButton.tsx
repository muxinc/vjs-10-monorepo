// NOTE: This is just a thin wrapper around the "skeletal" connected component that also applies a default (but overridable) definition of the
// "BaseComponent" that defines the actual UI.
// NOTE: Definitions like this should be able to be autogenerated via codegen, defined via a factory function (HoC or higher order component), or both.

import * as React from 'react';
// import { MediaMuteButton as BaseComponent } from 'media-chrome/react';
import BaseComponent from '../ui/MuteButton';
import ConnectedComponent from '../connected/MuteButton';

// NOTE: Assuming FC or "functional component" here for type expediency (though may be fine for our use cases).
type ConnectedComponentProps = Parameters<typeof ConnectedComponent>[0];
type ConnectedComponentReturnType = ReturnType<typeof ConnectedComponent>;
type DefaultedProps = 'component';
type ConnectedComponentWithDefaults = (
  props: Omit<ConnectedComponentProps, DefaultedProps> &
    Partial<Pick<ConnectedComponentProps, DefaultedProps>>
) => ConnectedComponentReturnType;

const Component: ConnectedComponentWithDefaults = ({
  component = BaseComponent,
  children,
  ...props
}) => {
  return (
    <ConnectedComponent {...props} component={component}>
      {children}
    </ConnectedComponent>
  );
};

export default Component;
