---
import type { HTMLTag, Polymorphic } from 'astro/types';
import { TabsRoot, TabsPanel } from '@/components/Tabs.tsx';

type Props<Tag extends HTMLTag = 'pre'> = Polymorphic<{ as: Tag }> & {
  maxWidth?: boolean;
  class?: string;
  hasFrame?: boolean;
  title?: string;
  'data-tabs-id'?: string;
};

const { as: Tag = 'pre', maxWidth = false, class: className, style: _style, title, hasFrame, ...props } = Astro.props;

const language = props['data-language'];
const label = title || language || 'code';

// Use stable ID from rehype plugin (generated at build time)
const tabsId = props['data-tabs-id'] || '';
if (tabsId === '' && !hasFrame) {
  throw new Error('Pre component requires a stable "data-tabs-id" prop when not used inside tabs.');
}
const value = 'code';
---

{
  hasFrame ? (
    <Tag class={className} {...props}>
      <slot />
    </Tag>
  ) : (
    <TabsRoot id={tabsId} aria-label={`${label} code`} defaultValue={value} titles={{ [value]: label }} client:load>
      <TabsPanel tabsId={tabsId} value={value} client:load>
        <Tag class={className} {...props}>
          <slot />
        </Tag>
      </TabsPanel>
    </TabsRoot>
  )
}
